import { BigFloat, eq, Numeric, setPrecision, string } from '../../src'

describe('parse / stringify', () => {
	const t = (n: Numeric, expectation: string) => {
		it(`parse(${n}) = ${expectation}`, () => {
			const result = new BigFloat(n)
			expect(result.toString()).toBe(expectation)
			expect(string(result)).toBe(expectation)
			expect(eq(result, expectation)).toBe(true)
		})
	}

	const e = (n: Numeric) => {
		it(`new BigFloat(${n}) should throw`, () => {
			expect(() => new BigFloat(n)).toThrow(TypeError)
		})
	}

	t(0, '0')
	t(0n, '0')
	t('0', '0')
	t(new BigFloat(0), '0')
	t(new BigFloat(0n), '0')
	t(new BigFloat('0'), '0')

	t(1, '1')
	t(1n, '1')
	t('1', '1')
	t(new BigFloat(1), '1')
	t(new BigFloat(1n), '1')
	t(new BigFloat('1'), '1')

	t(-1, '-1')
	t(-1n, '-1')
	t('-1', '-1')
	t(new BigFloat(-1), '-1')
	t(new BigFloat(-1n), '-1')
	t(new BigFloat('-1'), '-1')

	// Throw for octal, hex, and binary values
	e('0o1')
	e('0O1')
	e('0x1')
	e('0X1')
	e('0b1')
	e('0B1')

	// support scientific notation
	t('0e0', '0')
	t('0e+0', '0')
	t('0e-0', '0')
	t('-0e0', '0')
	t('-0e+0', '0')
	t('-0e-0', '0')

	t('0e1', '0')
	t('0e+1', '0')
	t('0e-1', '0')
	t('-0e1', '0')
	t('-0e+1', '0')
	t('-0e-1', '0')

	t('1e0', '1')
	t('1e+0', '1')
	t('1e-0', '1')
	t('-1e0', '-1')
	t('-1e+0', '-1')
	t('-1e-0', '-1')

	t('1e1', '10')
	t('1e+1', '10')
	t('1e-1', '0.1')
	t('-1e1', '-10')
	t('-1e+1', '-10')
	t('-1e-1', '-0.1')

	t('1.5e1', '15')
	t('1.5e+1', '15')
	t('1.5e-1', '0.15')
	t('-1.5e1', '-15')
	t('-1.5e+1', '-15')
	t('-1.5e-1', '-0.15')

	t('1.5e10', '15000000000')
	t('1.5e+10', '15000000000')
	t('1.5e-10', '0.00000000015')
	t('-1.5e10', '-15000000000')
	t('-1.5e+10', '-15000000000')
	t('-1.5e-10', '-0.00000000015')

	t('99999999999e10', '999999999990000000000')
	t('99999999999e+10', '999999999990000000000')
	t('99999999999e-10', '9.9999999999')
	t('-99999999999e10', '-999999999990000000000')
	t('-99999999999e+10', '-999999999990000000000')
	t('-99999999999e-10', '-9.9999999999')

	t('999.999e40', '9999990000000000000000000000000000000000000')
	t('999.999e+40', '9999990000000000000000000000000000000000000')
	t('999.999e-40', '0.0000000000000000000000000000000000000999999')
	t('-999.999e40', '-9999990000000000000000000000000000000000000')
	t('-999.999e+40', '-9999990000000000000000000000000000000000000')
	t('-999.999e-40', '-0.0000000000000000000000000000000000000999999')
})
